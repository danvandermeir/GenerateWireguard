#!/bin/bash

#what VPN clients connect to
#if left blank this will attempt to determine WAN IP and changes all client config files
ENDPOINT_HOSTNAME_OR_WANIP=''
#if left blank uses default port of 51820
ENDPOINT_PORT=''

#name of the local Wireguard interface this script controls
#if left blank lowest numbered default selected (wg0 - wg100)
WG_INTERFACE_NAME=''

#attempt to connect VPN network to default LAN if true
WG_NETWORK_ISOLATE=false

#handles only single subnet, typical 254 address LAN setup
#DO NOT LEAVE BLANK
WG_NETWORK='10.10.0.1/24'
WG_ADDRESS_RANGE_BEG='2'
WG_ADDRESS_RANGE_END='254'

##########DO NOT EDIT BELOW SCRIPT UNLESS YOU KNOW WHAT YOU'RE DOING, KTHNX##########
WGSCRIPT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )/${0##*/}"
if [ -z $1 ] || [ "${1}" = "-h" ] || [ "${1}" = "-help" ] || [ "${1}" = "help" ]
	then
		printf "\n\nEdit variables in begining of script before running!\n\
\n\
Usage:\n$WGSCRIPT <REQUIRED> <OPTION> <LIVE>\n\
\n\
REQUIRED:\n\
\t\t- A hostname or username of the Wireguard interface this script controls.\n\
\t\t  Provides details (config file) for hostname or username. Creates a peer if new.\n\
\t\t  If Wireguard interface name provided script will stand up or restart the interface with no routes.\n\
\n\
OPTION:\n\
\t\
new\t- Generate a new private and public key for specified hostname or username and display.\n\
\tOR\n\
\tremove\t- Remove peer with specified hostname or username.\n\
\nLIVE:\n\
\tlive\t- If provided will update the Wireguard interface with new or removed peer information.\n\
\t\t  Config files are otherwise generated for next interface start.\n\
\n"
		exit 1
	fi
if [ -z $WG_NETWORK ]
	then
		printf "Script variable WG_NETWORK not set!\n"
		exit 1
	fi
if [ -z $WG_ADDRESS_RANGE_BEG ]
	then
		printf "Script variable WG_ADDRESS_RANGE_BEG not set!\n"
		exit 1
	fi
if [ -z $WG_ADDRESS_RANGE_END ]
	then
		printf "Script variable WG_ADDRESS_RANGE_END not set!\n"
		exit 1
	fi
if [ -z $ENDPOINT_PORT ]
	then
		ENDPOINT_PORT="51820"
	fi
WGDIR='/etc/wireguard/'
if [ -z $WG_INTERFACE_NAME ]
	then
		for x in {0..100}
			do
				if [ ! -d /sys/class/net/wg${x} ] && [ ! -f ${WGDIR}wg${x}/generatewg_wg${x} ]
					then
						WGSCRIPT_NEW="${WGDIR}wg${x}/generatewg_wg${x}"
						WG_INTERFACE_NAME="wg${x}"
						printf "Script WG_INTERFACE_NAME variable not set!\n\
WG_INTERFACE_NAME set to ${WG_INTERFACE_NAME}!\n"
						break
					fi
			done
	fi
WGSDIR="${WGDIR}${WG_INTERFACE_NAME}/"
WGSCONF="${WGDIR}${WG_INTERFACE_NAME}.conf"
WGCCONFDIR="${WGSDIR}${1}/"
if [ -f ${WGSCONF}privatekey ]
	then
		SPRIVKEY=$(<"${WGSDIR}privatekey")
	else
		SPRIVKEY=$(wg genkey)
		printf "${SPRIVKEY}" > ${WGSDIR}privatekey
	fi
if [ -f ${WGSCONF}publickey ]
	then
		SPUBLKEY=$(<"${WGSDIR}publickey")
	else
		SPUBLKEY=$(printf "${SPRIVKEY}" | wg pubkey)
		printf "${SPUBLKEY}" > ${WGSDIR}publickey
	fi
if [ -z $ENDPOINT_HOSTNAME_OR_WANIP ]
	then
		ENDPOINT_HOSTNAME_OR_WANIP="$(dig +short myip.opendns.com @resolver1.opendns.com)"
		printf "Script ENDPOINT_HOSTNAME_OR_WANIP variable not set!\n\
ENPOINT_HOSTNAME_OR_WANIP set to ${ENDPOINT_HOSTNAME_OR_WANIP} on port ${ENDPOINT_PORT}!\n\
All hostname or username config files belonging to Wireguard interface name ${WG_INTERFACE_NAME} reset!\n"
		if [ -z $WGSCRIPT_NEW ]
			then
				WGSCRIPT_NEW="${WGSCRIPT}"
			fi
		if [ -d ${WGSDIR} ]
			then
				for x in $(find ${WGSDIR} -maxdepth 1 -mindepth 1 -type d)
					do
						WGC=$(printf "${x}"|rev|cut -d'/' -f 1|rev)
						WGCCONF=${x}'/'${WGC}'.conf'
						if [ -f ${WGCCONF} ]
							then
								rm -f ${WGCCONF}
							fi
						if [ -f ${x}/privatekey ] && [ -f ${x}/publickey ] && [ -f ${x}/address ]
							then
								ADDRESS=$(<"${x}/address")
								PUBLKEY=$(<"${x}/publickey")
								PRIVKEY=$(<"${x}/privatekey")
								printf "\t${WGC} - ${ADDRESS} - ${PUBLKEY}\n"
								WGCFILE="[Interface]\n\
PrivateKey = ${PRIVKEY}\n\
PublicKey = ${PUBLKEY}\n\
Address = ${ADDRESS}/$(echo $WG_NETWORK|cut -d'/' -f2)\n\
\n\
[Peer]\n\
PublicKey = ${SPUBLKEY}\n\
AllowedIPs = $WG_NETWORK\n\
Endpoint = $ENDPOINT_HOSTNAME_OR_WANIP:$ENDPOINT_PORT"
								printf "${WGCFILE}" > ${WGCCONF}
							fi
					done
			fi
	fi
WGC="${1}"
WGCCONF="${WGCCONFDIR}${WGC}.conf"
WGSCONFCREATE () {
	WGSFILE="[Interface]\n\
PrivateKey = ${SPRIVKEY}\n\
PublicKey = ${SPUBLKEY}\n\
ListenPort = ${ENDPOINT_PORT}"
	if [ -d ${WGSDIR} ]
		then
			for x in $(find ${WGSDIR} -maxdepth 1 -mindepth 1 -type d)
				do
					if [ -f ${x}/publickey ] && [ -f ${x}/address ]
						then
							WGSFILE="$WGSFILE\n\
\n\
[Peer]\n\
PublicKey = $(<${x}/publickey)\n\
AllowedIPs = $(<${x}/address)/32"
						fi
				done
		else
			mkdir -p ${WGSDIR}
		fi
	if [ ! -z $WGSCRIPT_NEW ]
		then
			if [ ! -f ${WGSCRIPT_NEW} ]
				then
					printf "Script moved to: ${WGSCRIPT_NEW}\n"
					cp ${WGSCRIPT} ${WGSCRIPT_NEW}
				fi
			sed -i -e "0,/.*ENDPOINT_HOSTNAME_OR_WANIP=.*/ s/.*ENDPOINT_HOSTNAME_OR_WANIP=.*/ENDPOINT_HOSTNAME_OR_WANIP='${ENDPOINT_HOSTNAME_OR_WANIP}'/" ${WGSCRIPT_NEW}
			sed -i -e "0,/.*WG_INTERFACE_NAME=.*/ s/.*WG_INTERFACE_NAME=.*/WG_INTERFACE_NAME='${WG_INTERFACE_NAME}'/" ${WGSCRIPT_NEW}
		fi
	printf "${WGSFILE}" > ${WGSCONF}
}
WGSLIVE () {
	if [ "${2}" = "live" ] || ([ "${1}" = "live" ] && [ -z $3 ])
		then
			if [ -d /sys/class/net/${WG_INTERFACE_NAME} ]
				then
					wg syncconf ${WG_INTERFACE_NAME} ${WGSCONF}
				else
					if [ -z $WGSCRIPT_NEW ]
						then
							printf "Interface ${WG_INTERFACE_NAME} not running!\n\
Start interface with:\n\
${WGSCRIPT} ${WG_INTERFACE_NAME}\n"
						else
							printf "Interface ${WG_INTERFACE_NAME} not running!\n\
Start interface with:\n\
${WGSCRIPT_NEW} ${WG_INTERFACE_NAME}\n"
						fi
				fi
		fi
}
if [ ! -f ${WGSCONF} ] || [ ! -z $WGSCRIPT_NEW ]
	then
		WGSCONFCREATE
	fi
if [ "${WGC}" = "${WG_INTERFACE_NAME}" ]
	then
		if [ -d /sys/class/net/${WG_INTERFACE_NAME} ]
			then
				ip link delete dev ${WG_INTERFACE_NAME}
			fi
		ip link add dev ${WG_INTERFACE_NAME} type wireguard && wg setconf ${WG_INTERFACE_NAME} ${WGSCONF} && exit
		exit 1
	fi
if [ "${2}" = "remove" ]
	then
		if [ -d ${WGCCONFDIR} ]
			then
				printf "${WGC} removed!\n"
				rm -rf ${WGCCONFDIR}
			else
				printf "No Hostname or Username called ${WGC} exists!\n"
			fi
		rm -f ${WGSCONF}
		WGSCONFCREATE
		WGSLIVE ${2} ${3}
	else
		if [ ! -d ${WGCCONFDIR} ]
			then
				mkdir -p ${WGCCONFDIR}
			fi
		if [ -f ${WGCCONFDIR}address ]
			then
				ADDRESS=$(<"${WGCCONFDIR}address")
			else
				ADDRESS=$(echo $WG_NETWORK|cut -d'.' -f1)'.'$(echo $WG_NETWORK|cut -d'.' -f2)'.'$(echo $WG_NETWORK|cut -d'.' -f3)'.'
				WGSFILE=$(<${WGSCONF})
				while echo "${WGSFILE}"|grep -q "${ADDRESS}${WG_ADDRESS_RANGE_BEG}"
					do
						if [ $WG_ADDRESS_RANGE_BEG -eq $WG_ADDRESS_RANGE_END ]
							then
								printf "No available address!\n"
								exit 1
							else
								((WG_ADDRESS_RANGE_BEG=WG_ADDRESS_RANGE_BEG+1))
							fi
				done
				ADDRESS="${ADDRESS}${WG_ADDRESS_RANGE_BEG}"
				printf "${ADDRESS}" > ${WGCCONFDIR}address
				if [ -f ${WGCCONF} ]
					then
						rm -f ${WGCCONF}publickey
					fi
			fi
		if [ ! -f ${WGCCONFDIR}privatekey ] || [ "${2}" = "new" ]
			then
				PRIVKEY=$(wg genkey)
		    		printf "${PRIVKEY}" > ${WGCCONFDIR}privatekey
				if [ -f ${WGCCONFDIR}publickey ]
					then
						rm -f ${WGCCONFDIR}publickey
					fi
				if [ -f ${WGCCONF} ]
					then
						rm -f ${WGCCONF}publickey
					fi
			else
				PRIVKEY=$(<"${WGCCONFDIR}privatekey")
			fi
		if [ ! -f ${WGCCONFDIR}publickey ] || [ "${2}" = "new" ]
			then
				PUBLKEY=$(printf "${PRIVKEY}" | wg pubkey)
				printf "${PUBLKEY}" > ${WGCCONFDIR}publickey
				if [ -f ${WGCCONF} ]
					then
						rm -f ${WGCCONF}publickey
					fi
			else
				PUBLKEY=$(<"${WGCCONFDIR}publickey")
			fi
		if [ ! -f ${WGCCONF} ] || [ "${2}" = "new" ]
			then
				WGCFILE="[Interface]\n\
PrivateKey = $PRIVKEY\n\
PublicKey = $PUBLKEY\n\
Address = $ADDRESS/$(echo $WG_NETWORK|cut -d'/' -f2)\n\
\n\
[Peer]\n\
PublicKey = $SPUBLKEY\n\
AllowedIPs = $WG_NETWORK\n\
Endpoint = $ENDPOINT_HOSTNAME_OR_WANIP:$ENDPOINT_PORT"
				printf "${WGCFILE}" > ${WGCCONF}
			else
				WGCFILE=$(<"${WGCCONF}")
			fi
		if grep -q "$ADDRESS" ${WGSCONF} && [ "${2}" = "new" ]
			then
				rm -f ${WGSCONF}
				WGSCONFCREATE
		elif ! grep -q "$ADDRESS" ${WGSCONF}
			then
				printf "\n\
\n\
[Peer]\n\
PublicKey = $PUBLKEY\n\
AllowedIPs = $ADDRESS/32" >> ${WGSCONF}
			fi
		WGSLIVE ${2} ${3}
		printf "${WGCFILE}\n"
	fi
exit

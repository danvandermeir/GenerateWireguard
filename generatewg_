#!/bin/bash
#what VPN peers connect to, save yourself trouble and utilize a DNS name
#if blank attempts to determine WAN IP, if this is changes all client configuration files must be modified!
WG_ENDPOINT=''
#if blank uses default port of 51820, ascends if used
WG_ENDPOINT_PORT=''

#name of the local Wireguard interface this script controls
#if blank ascends (wg0 - wg100), skips used
WG_IFACE_NAME=''
#IP and network of the local Wireguard interface, CIDR format only: X.X.X.X/X
#if blank checks WG_LAN for network, ascends networks if used
WG_IFACE_NTWRK=''
#peer ip range, CIDR format only: X.X.X.X/X
#if blank ascends from interface IP, wraps, ends at WG_ADDRESS_RANGE_END or interface IP
WG_ADDRESS_RANGE_BEG=''
WG_ADDRESS_RANGE_END=''

#attach VPN to this "LAN" interface name
#if blank uses default network
WG_LAN=''
#connect VPN to "LAN" if true instead of false
WG_IFACE_NTWRK_UNISOLATE=false
#pass "all" peer traffic through VPN and system default route as needed when true (usually a NAT) instead of false
WG_IFACE_NTWRK_GATEWAY=false

#if using VPN to pass "all" peer traffic a "safe" DNS server should absolutely be considered
WG_DNS_SEND=false
#if blank gives peers system default DNS server, above must be true
WG_DNS=''

#######################################################################################
########## DO NOT EDIT BELOW SCRIPT UNLESS YOU KNOW WHAT YOU'RE DOING, KTHNX ##########
#######################################################################################
WRITEWGSCONF=false
WGSCRIPTNAME="${0##*/}"
WGSCRIPTPATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

#HELP REQUEST/HOW TO USE
if [ -z $1 ] || [[ $1 =~ '-h'|'-help'|'--help'|'help' ]]; then
	printf "Edit variables in begining of script before running!\n\
\n\
Usage:\n\
$WGSCRIPTPATH <REQUIRED> <OPTION> <LIVE>\n\
\n\
REQUIRED:\n\
\t\t- A hostname or username controlled by this script for this Wireguard interface name.\n\
\t\t  Creates a peer if 'new' OPTION specified. Provides details (config file) for hostname or username.\n\
\n\
\t\t- If Wireguard interface name provided script will stand up or restart the interface using existing configuration.\n\
\n\
OPTION:\n\
\tnew\t- Generate a new private and public key for specified hostname or username and display.\n\
\n\
\tremove\t- Remove peer with specified hostname or username.\n\
\n\
LIVE:\n\
\tlive\t- If provided will update the Wireguard interface with new or removed peer information.\n\
\t\t  Configuration files are otherwise generated for next interface start.\n"
	exit
fi

#VERIFY EXISTANCE OF REQUIRED BINARIES/APPLICATIONS
if ! command -v wg &>/dev/null; then
		printf "Wireguard not available! No path or wrong path? Installed?\n" 1>&2
		exit 1
fi

#DETERMINE WIREGAURD INTERFACE NAME FROM SCRIPT NAME (wireguard_X), SCRIPT PATH, OR CREATES NEW DEFAULT WIREGAURD INTERFACE (wgX) WITH CONFIGURATION FILES
#VERIFY SCRIPT NAME
WGSCRIPTWRITE() {
	local WGSCRIPTPATH_NEW="/etc/wireguard/generatewg_$1"
	if [ ! -f "$WGSCRIPTPATH_NEW" ]; then
		cp "$WGSCRIPTPATH$WGSCRIPTNAME" "$WGSCRIPTPATH_NEW"
		chown root "$WGSCRIPTPATH_NEW"
		chmod 700 "$WGSCRIPTPATH_NEW"
		printf "Script copied to $WGSCRIPTPATH_NEW!\n"
	fi
	printf "Use $WGSCRIPTPATH_NEW instead! Script file can be moved.\n"
}
if [ -z $WG_IFACE_NAME ]; then
	if [ ! "$WGSCRIPTNAME" = "generatewg_" ] && [[ "$WGSCRIPTNAME" == "wireguard_"* ]]; then
		WG_IFACE_NAME="${WGSCRIPTNAME#*_}"
	else
		for x in {0..100}; do
			if [ ! -d /sys/class/net/wg${x} ] && [ ! -f /etc/wireguard/wg${x}.conf ]; then
				WG_IFACE_NAME="wg$x"
				printf "Script WG_IFACE_NAME variable not set!\n\
Script name has no hint!\n\
WG_IFACE_NAME set to $WG_IFACE_NAME!\n"
				WGSCRIPTWRITE "$WG_IFACE_NAME"
				WRITEWGSCONF=true
				break
			fi
		done
	fi
elif [ ! "$WGSCRIPTNAME" = "wireguard_$WG_IFACE_NAME" ]; then
	printf "Script name is improper!\n" 1>&2
	WGSCRIPTWRITE "$WG_IFACE_NAME"
fi

#LOAD WIREGAURD INTERFACE CONFIGURATION FILE TO MEMORY AND SET VARIABLES OR CREATE FILE
#VERIFY CONFIGURATION FILE CONTINUITY AGAINST SCRIPT SETTINGS, IF DIFFERENT AND CHANGES ACCEPTED BY USER MODIFIES CONFIGURATION FILE TO MATCH SCRIPT
WGSCONFFULLPATH="/etc/wireguard/$WG_IFACE_NAME.conf"
WGC="${1// }"
WGCCONFDIR="$WGSDIR$1/"
if [ -f ${WGSCONFFULLPATH} ]; then
	WGSCONF=$(<"$WGSCONFFULLPATH")
	WGCCONF=false
	while IFS="" read -r x || [ -n "$x" ]; do
		if $WGCCONF; then
			case $x in
				\[Peer]*)
					break;;
				PublicKey = *)
					[ -z $WGC_PUBKEY ] WGC_PUBKEY=${x#PublicKey = };;
				PresharedKey = *)
					[ -z $WGC_PREKEY ] && WGC_PREKEY=${x#PresharedKey = };;
				AllowedIPs = *)
					[ -z $WG_IFACE_NTWRK ] && WG_IFACE_NTWRK=${x//[!0-9\,\/\.]} && WG_IFACE_NTWRK=${WG_IFACE_NTWRK%%,*};;
			esac
		else
			case $x in
				\#Peer = ${WGC}*)
					WGCCONF=true;;
				ListenPort = *)
					[ -z $WG_ENDPOINT_PORT ] && WG_ENDPOINT_PORT=${x//[!0-9]};;
				PrivateKey = *)
					[ -z $WGS_PRIKEY ] && WGS_PRIKEY=${x#PrivateKey = } && WGS_PRIKEY=${WGS_PRIKEY// } && WGS_PUBKEY=$(wg pubkey<<<"$WGS_PRIKEY");;
				PresharedKey = *)
					[ -z $WGS_PREKEY ] && WGS_PREKEY=${x#PresharedKey = } && WGS_PREKEY=${WGS_PREKEY// };;
				Address = *)
					[ -z $WG_IFACE_NTWRK ] && WG_IFACE_NTWRK=${x//[!0-9\,\/\.]} && WG_IFACE_NTWRK=${WG_IFACE_NTWRK%%,*};;
				\#PeerEndpoint = *)
					[ -z $WG_ENDPOINT ] && WG_ENDPOINT=${x#\#PeerEndpoint = } && WG_ENDPOINT=${WG_ENDPOINT// };;
				\#PeerDNS = *)
					[ -z $WG_DNS ] && WG_DNS=${x//[!0-9\/\.]} && WG_DNS=${WG_DNS%%/*};;
				\#RangeBeg = *)
					[ -z $WG_ADDRESS_RANGE_BEG ] && WG_ADDRESS_RANGE_BEG=${x//[!0-9\,\/\.]} && WG_ADDRESS_RANGE_BEG=${WG_ADDRESS_RANGE_BEG%%,*};;
				\#RangeEnd = *)
					[ -z $WG_ADDRESS_RANGE_END ] && WG_ADDRESS_RANGE_END=${x//[!0-9\,\/\.]} && WG_ADDRESS_RANGE_END=${WG_ADDRESS_RANGE_END%%,*};;
			esac
		fi
	done < <(WGSCONF)
else
	WRITEWGSCONF=true
fi

[ "$IFACE" =  "$(defaultinterface)" ]; then
	echo 1>/proc/sys/net/ipv4/ip_forward
	iptables -A INPUT -i LAN-LAN -s 10.9.0.0/24 -j ACCEPT
	iptables -A INPUT -i VPN2 -s 10.10.0.0/24 -j ACCEPT
	iptables -A OUTPUT -o LAN-LAN -s 10.10.0.0/24 -d 10.9.0.0/24 -j ACCEPT
	iptables -A OUTPUT -o VPN2 -s 10.9.0.0/24 -d 10.10.0.0/24 -j ACCEPT
	iptables -A FORWARD -i LAN-LAN -o VPN2 -j ACCEPT
	iptables -A FORWARD -i VPN2 -o LAN-LAN -j ACCEPT
fi

#VERIFY WIREGAURD INTERFACE IP, OR CREATE NEW WIREGUARD NETWORK FROM DEFAULT "LAN" INTERFACE AS TEMPLATE
cidrtomask() {
	if [ -z $1 ] || [[ ! $1 =~ ^[0-9]+$ ]] || [ $1 -lt 0 ] || [ $1 -gt 32 ]; then
		printf "CIDR bit length not provided to cidrtomask function!\n" 1>&2
		exit 1
	fi
	local i mask full_octets partial_octet
	full_octets=$(($1/8))
	partial_octet=$(($1%8))
	for ((i=0;i<4;i+=1)); do
		if [ $i -lt $full_octets ]; then
			mask+=255
		elif [ $i -eq $full_octets ]; then
			mask+=$((256 - 2**(8-$partial_octet)))
		else
			mask+=0
		fi
		test $i -lt 3 && mask+=.
	done
	printf "$mask"
}
networkmin() {
	if [ -z $1 ] || [[ ! $1 =~ ^[0-9/.]+$ ]] || [[ $1 != *"/"* ]]; then
		printf "CIDR network not provided to networkmin function!\n" 1>&2
		exit 1
	fi
	local a1 a2 a3 a4 m1 m2 m3 m4
	IFS=. read -r a1 a2 a3 a4<<<"${1%/*}"
	IFS=. read -r m1 m2 m3 m4<<<"$(cidrtomask ${1#*/})"
	a1=$((a1 & m1))
	a2=$((a2 & m2))
	a3=$((a3 & m3))
	a4=$((a4 & m4))
	printf "$a1.$a2.$a3.$a4"
}
networkmax() {
	if [ -z $1 ] || [[ ! $1 =~ ^[0-9/.]+$ ]] || [[ $1 != *"/"* ]]; then
		printf "CIDR network not provided to networkmax function!\n" 1>&2
		exit 1
	fi
	local a1 a2 a3 a4 m1 m2 m3 m4
	IFS=. read -r a1 a2 a3 a4<<<"${1%/*}"
	IFS=. read -r m1 m2 m3 m4<<<"$(cidrtomask ${1#*/})"
	a1=$(( ( 255 ^ m1 ) | a1 ))
	a2=$(( ( 255 ^ m2 ) | a2 ))
	a3=$(( ( 255 ^ m3 ) | a3 ))
	a4=$(( ( 255 ^ m4 ) | a4 ))
	printf "$a1.$a2.$a3.$a4"
}
getnextnetwork() {
	if [ -z $1 ] || [[ ! $1 =~ ^[0-9/.]+$ ]] || [[ $1 != *"/"* ]]; then
		printf "CIDR network not provided to getnextnetwork function!\n" 1>&2
		exit 1
	fi
	local a1 a2 a3 a4 a5 a6 h1 h2 h3 h4 m1 m2 m3 m4 address
	IFS=. read -r a1 a2 a3 a4<<<"${1%/*}"
	h1=$a1
	h2=$a2
	h3=$a3
	h4=$a4
	a5=${1#*/}
	a6=$(( 32 - a5 ))
	IFS=. read -r m1 m2 m3 m4<<<"$(cidrtomask $a5)"
	address=$((((((((((a1 << 8) | a2) << 8) | a3) << 8) | a4) >> a6) + 1) << a6 ))
	a4=$(( ((255 & address) & m4) | (h4 & (255 ^ m4)) ))
	address=$((address >> 8))
	a3=$(( ((255 & address) & m3) | (h3 & (255 ^ m3)) ))
	address=$((address >> 8))
	a2=$(( ((255 & address) & m2) | (h2 & (255 ^ m2)) ))
	address=$((address >> 8))
	a1=$(( ((255 & address) & m1) | (h1 & (255 ^ m1)) ))
	[ $h1 -eq 10 ] && [ $a1 -ne 10 ] && a1=10
	[ "$h1$h2" = "192168" ] && [ "$a1$a2" != "192168" ] && a1=192 && a2=168
	[ "$h1$h2" = "169254" ] && [ "$a1$a2" != "169254" ] && a1=169 && a2=254
	[ $a1 -eq 172 ] && [ $a2 -gt 31 ] && a2=16
	printf "$a1.$a2.$a3.$a4/$a5"
}
getnexthost() {
	if [ -z $1 ] || [[ ! $1 =~ ^[0-9/.]+$ ]] || [[ $1 != *"/"* ]]; then
		printf "CIDR network not provided to getnexthost function!\n" 1>&2
		exit 1
	fi
	local a1 a2 a3 a4 a5 h1 h2 h3 h4 m1 m2 m3 m4 address
	IFS=. read -r a1 a2 a3 a4<<<"${1%/*}"
	h1=$a1
	h2=$a2
	h3=$a3
	h4=$a4
	a5=${1#*/}
	IFS=. read -r m1 m2 m3 m4<<<"$(cidrtomask $a5)"
	address=$((((((((a1 << 8) | a2) << 8) | a3) << 8) | a4) + 1))
	a4=$((255 & address))
	a4=$(((a4 & m4) | (a4 & (255 ^ m4))))
	address=$((address >> 8))
	a3=$((255 & address))
	a3=$(((a3 & m3) | (a3 & (255 ^ m3))))
	address=$((address >> 8))
	a2=$((255 & address))
	a2=$(((a2 & m2) | (a2 & (255 ^ m2))))
	address=$((address >> 8))
	a1=$((255 & address))
	a1=$(((a1 & m1) | (a1 & (255 ^ m1))))
	printf "$a1.$a2.$a3.$a4/$a5"
}
rangeunused() {
	if [ -z $1 ] || ! [[ $1 =~ ^[0-9/.]+$ ]] || [[ $1 != *"/"* ]]; then
		printf "CIDR network not provided to rangeunused function!\n" 1>&2
		exit 1
	fi
	local a1 a2 a3 a4 a5 cur max address
	a5=${1#*/}
	IFS=. read -r a1 a2 a3 a4<<<"$(networkmax $1)"
	max=$(( ( a1 << 24 ) + ( a2 << 16 ) + ( a3 << 8 ) + a4 ))
	address=$(networkmin $1)
	IFS=. read -r a1 a2 a3 a4<<<"$address"
	while [[ "$(ip route get $a1.$a2.$a3.$a4/$a5)" == *"via"* ]] || return 1; do
		cur=$(( ( a1 << 24 ) + ( a2 << 16 ) + ( a3 << 8 ) + a4 ))
		[ $cur -eq $max ] && break
		a4=$(( a4 + 1 ))
		[ $a4 -eq 256 ] && a4=0 && a3=$(( a3 + 1 ))
		[ $a3 -eq 256 ] && a3=0 && a2=$(( a2 + 1 ))
		[ $a2 -eq 256 ] && a2=0 && a1=$(( a1 + 1 ))
		[ $a1 -eq 256 ] && a1=0
	done
#	IFS=. read -r a1 a2 a3 a4<<<"$address"
	#nmap or icmp check?
	return
}
getnetworkof() {
	if [ -z $1 ] || ! ip address show "$1"|grep -q 'inet '; then
		printf 'getnetworkof function provided no or invalid network name!\n' 1>&2
		return 1
	fi
	local address
	address=$(ip address show "$1"|grep 'inet ')
	address=${address#*inet }
	printf "${address%% *}"
}
generatenetworkfrom() {
	local address nextaddress
	if [ -n "$1" ]; then
		printf "Using $1 to generate a network!\n" 1>&2
		address=$(getnetworkof "$1")
	fi
	if [ -z $address ]; then
		address=$(ip route show default)
		address=${address#* dev }
		address=${address%% *}
		printf "Using default ($address) to generate a network!\n" 1>&2
		address=$(getnetworkof "$address")
	fi
	nextaddress=$(getnextnetwork "$address")
	while ! rangeunused "$nextaddress"; do
		nextaddress=$(getnextnetwork "$nextaddress")
		if [ "$address" = "$nextaddress" ]; then
			printf "generatenetworkfrom function could not determine an unused network!\n" 1>&2
			exit 1
		fi
	done
	printf "$nextaddress"
}
clientconfignetwork() {
	#WARNING!!!! This function has the potential to "guess" prior existing networks based on peer configurations wrong!
	local a1 a2 a3 a4 a5 a6 check lowest highest address generated
	if [ -n "$WGSCONF" ]; then
		while IFS= read -r x || [ -n "$x" ]; do
			if [[ "$x" == "AllowedIPs = "* ]]; then
				address=${x//[!0-9\,\/\.]}
				address=${address%%,*}
				address=${address%/*}
				IFS=. read -r a1 a2 a3 a4<<<"$address"
			check=$(((a1 << 24) + (a2 << 16) + (a3 << 8) + a4))
				if [ -z $lowest ]; then
					lowest=$check
					highest=$check
				elif [ $check -lt $lowest ]; then
					lowest=$check
				elif [ $check -gt $highest ]; then
					highest=$check
				fi
			fi
		done <<< "$WGSCONF"
		if [ -z $lowest ]; then
			printf 'clientconfignetwork function could not determine any peer configurations!\n' 1>&2
			return 1
		fi
	else
		printf 'No Wiregaurd server configuration for clientconfignetwork function!\n' 1>&2
		return 1
	fi
	printf 'clientconfignetwork function attempting to match an existing network to Wireguard configuration file peers!\n' 1>&2
	a6=$(generatenetworkfrom $1)
	generated=$(getnexthost $a6)
	IFS=. read -r a1 a2 a3 a4<<<"${generated%/*}"
	check=$(((a1 << 24) + (a2 << 16) + (a3 << 8) + a4))
	if [ $check -eq $lowest ] || [ $check -eq $((lowest - 1)) ]; then
		printf 'clientconfignetwork function matched a network for Wireguard configuration file peers! Verify network in configuration file!\n' 1>&2
		printf "$a6"
	else
		printf 'clientconfignetwork function attempting to guess network for Wireguard configuration file peers!\n' 1>&2
		for x in {30..8}; do
			IFS=. read -r a1 a2 a3 a4<<<"$(networkmin $address/$x)"
			a5="$a1.$a2.$a3.$((a4 + 1))"
			check=$((((a1 << 24) + (a2 << 16) + (a3 << 8) + a4) + 2))
			if [ $check -eq $lowest ]; then
				IFS=. read -r a1 a2 a3 a4<<<"$(networkmax $address/$x)"
				check=$(((a1 << 24) + (a2 << 16) + (a3 << 8) + a4))
				[ $check -gt $highest ] && address="$a5/$x" && a5=$x && break
			else
				IFS=. read -r a1 a2 a3 a4<<<"$(networkmax $address/$x)"
				generated="$a1.$a2.$a3.$((a4 - 1))"
				check=$((((a1 << 24) + (a2 << 16) + (a3 << 8) + a4) - 2))
				if [ $check -eq $highest ]; then
					IFS=. read -r a1 a2 a3 a4<<<"$a5"
					check=$(((a1 << 24) + (a2 << 16) + (a3 << 8) + a4))
					[ $check -le $lowest ] && address="$generated/$x" && a5=$x && break
				fi
			fi
			a5=''
		done
		if [ -z $a5 ]; then
			printf 'clientconfignetwork function could not determine a network from Wireguard confifuration file!\n' 1>&2
			return 1
		else
			if [ ${a6#*/} -lt $((a5 + 5)) ] && [ ${a6#*/} -gt $((a5 - 5)) ]; then
				printf 'clientconfignetwork function guessed a network close to existing network! Using existing network! Verify network in configuration file!\n' 1>&2
				printf "$a6"
			else
				printf 'clientconfignetwork function guessed a network! Verify network in configuration file!\n' 1>&2
				printf "$address"
			fi
		fi
	fi
}
if [ -z $WG_IFACE_NTWRK ]; then
	printf "Script variables not set! Attempting to determine Wireguard network from corrupted config file!\n" 1>&2
	WRITEWGSCONF=true
	WG_IFACE_NTWRK=$(clientconfignetwork "$WG_LAN")
	WGCCONF=$WG_IFACE_NTWRK
	if [ -n "$WG_IFACE_NTWRK" ]; then
		while ! rangeunused "$WG_IFACE_NTWRK"; do
			WG_IFACE_NTWRK=$(getnextnetwork $WG_IFACE_NTWRK)
			[ "$WGCCONF" = "$WG_IFACE_NTWRK" ] && WG_IFACE_NTWRK='' && break
		done
	fi
	if [ -z $WG_IFACE_NTWRK ]; then
		printf "Generating network for Wiregaurd interface!" 1>&2
		WG_IFACE_NTWRK=$(generatenetworkfrom "$WG_LAN")
	fi
fi

#VERIFY WIREGAURD PEER RANGE BEGINING
if [ -n "$WG_ADDRESS_RANGE_BEG" ] && [ ! "$(networkmin $WG_IFACE_NTWRK)" = "$(networkmin $WG_ADDRESS_RANGE_BEG)" ]; then
	printf "Peer address range begin not in contigous network with Wiregaurd interface! Correct script variables!" 1>&2
	exit 1
fi

#VERIFY WIREGAURD PEER RANGE ENDING
if [ -n "$WG_ADDRESS_RANGE_END" ] && [ ! "$(networkmin $WG_IFACE_NTWRK)" = "$(networkmin $WG_ADDRESS_RANGE_END)" ]; then
	printf "Peer address range end not in contigous network with Wiregaurd interface! Correct script variables!" 1>&2
	exit 1
fi

#VERIFY ENDPOINT KEYS
if [ -z $WGS_PRIKEY ]; then
	printf "No Wireguard interface private key! Generating new key!" 1>&2
	WRITEWGSCONF=true
	WGS_PRIKEY=$(wg genkey)
fi
WGS_PUBKEY=$(wg pubkey<<<"$WGS_PRIKEY")

#VERIFY ENDPOINT PORT
if [ -z $WG_ENDPOINT_PORT ]; then
		WG_ENDPOINT_PORT="51820"
		while wg show|grep 'listening port:'|grep -q "$WG_ENDPOINT_PORT"; do
			WG_ENDPOINT_PORT=$((WG_ENDPOINT_PORT + 1))
		done
fi

if [ -z $WG_ENDPOINT ]; then
		WG_ENDPOINT="$(dig +short myip.opendns.com @resolver1.opendns.com)"
		printf "Script WG_ENDPOINT variable not set!\n\
ENPOINT_HOSTNAME_OR_WANIP set to ${WG_ENDPOINT} on port ${WG_ENDPOINT_PORT}!\n\
All hostname or username config files belonging to Wireguard interface name ${WG_IFACE_NAME} reset!\n"
		if [ -z $WGSCRIPTPATH_NEW ]
			then
				WGSCRIPTPATH_NEW="${WGSCRIPTPATH}"
			fi
		if [ -d ${WGSDIR} ]
			then
				for x in $(find ${WGSDIR} -maxdepth 1 -mindepth 1 -type d)
					do
						WGC=$(printf "${x}"|rev|cut -d'/' -f 1|rev)
						WGCCONF=${x}'/'${WGC}'.conf'
						if [ -f ${WGCCONF} ]
							then
								rm -f ${WGCCONF}
							fi
						if [ -f ${x}/privatekey ] && [ -f ${x}/publickey ] && [ -f ${x}/address ]
							then
								ADDRESS=$(<"${x}/address")
								PUBLKEY=$(<"${x}/publickey")
								PRIVKEY=$(<"${x}/privatekey")
								printf "\t${WGC} - ${ADDRESS} - ${PUBLKEY}\n"
								WGCFILE="[Interface]\n\
PrivateKey = ${PRIVKEY}\n\
PublicKey = ${PUBLKEY}\n\
Address = ${ADDRESS}/$(echo $WG_IFACE_NTWRK|cut -d'/' -f2)\n\
\n\
[Peer]\n\
PublicKey = ${SPUBLKEY}\n\
AllowedIPs = $WG_IFACE_NTWRK\n\
Endpoint = $WG_ENDPOINT:$WG_ENDPOINT_PORT"
								printf "${WGCFILE}" > ${WGCCONF}
							fi
					done
			fi
	fi
WGSCONFPATHCREATE () {
	WGSFILE="[Interface]\n\
PrivateKey = ${SPRIVKEY}\n\
PublicKey = ${SPUBLKEY}\n\
ListenPort = ${WG_ENDPOINT_PORT}"
	if [ -d ${WGSDIR} ]
		then
			for x in $(find ${WGSDIR} -maxdepth 1 -mindepth 1 -type d)
				do
					if [ -f ${x}/publickey ] && [ -f ${x}/address ]
						then
							WGSFILE="$WGSFILE\n\
\n\
[Peer]\n\
PublicKey = $(<${x}/publickey)\n\
AllowedIPs = $(<${x}/address)/32"
						fi
				done
		else
			mkdir -p ${WGSDIR}
		fi
	if [ ! -z $WGSCRIPTPATH_NEW ]
		then
			if [ ! -f ${WGSCRIPTPATH_NEW} ]
				then
					printf "Script moved to: ${WGSCRIPTPATH_NEW}\n"
					cp ${WGSCRIPTPATH} ${WGSCRIPTPATH_NEW}
				fi
			sed -i -e "0,/.*WG_ENDPOINT=.*/ s/.*WG_ENDPOINT=.*/WG_ENDPOINT='${WG_ENDPOINT}'/" ${WGSCRIPTPATH_NEW}
			sed -i -e "0,/.*WG_IFACE_NAME=.*/ s/.*WG_IFACE_NAME=.*/WG_IFACE_NAME='${WG_IFACE_NAME}'/" ${WGSCRIPTPATH_NEW}
		fi
	printf "${WGSFILE}" > ${WGSCONFPATH}
}
WGSLIVE () {
	if [ "${2}" = "live" ] || ([ "${1}" = "live" ] && [ -z $3 ])
		then
			if [ -d /sys/class/net/${WG_IFACE_NAME} ]
				then
					wg syncconf ${WG_IFACE_NAME} ${WGSCONFPATH}
				else
					if [ -z $WGSCRIPTPATH_NEW ]
						then
							printf "Interface ${WG_IFACE_NAME} not running!\n\
Start interface with:\n\
${WGSCRIPTPATH} ${WG_IFACE_NAME}\n"
						else
							printf "Interface ${WG_IFACE_NAME} not running!\n\
Start interface with:\n\
${WGSCRIPTPATH_NEW} ${WG_IFACE_NAME}\n"
						fi
				fi
		fi
}
if [ ! -f ${WGSCONFPATH} ] || [ ! -z $WGSCRIPTPATH_NEW ]
	then
		WGSCONFPATHCREATE
	fi
if [ "${WGC}" = "${WG_IFACE_NAME}" ]
	then
		if [ -d /sys/class/net/${WG_IFACE_NAME} ]
			then
				ip link delete dev ${WG_IFACE_NAME}
			fi
		ip link add dev ${WG_IFACE_NAME} type wireguard && wg setconf ${WG_IFACE_NAME} ${WGSCONFPATH} && exit
		exit 1
	fi
if [ "${2}" = "remove" ]
	then
		if [ -d ${WGCCONFDIR} ]
			then
				printf "${WGC} removed!\n"
				rm -rf ${WGCCONFDIR}
			else
				printf "No Hostname or Username called ${WGC} exists!\n"
			fi
		rm -f ${WGSCONFPATH}
		WGSCONFPATHCREATE
		WGSLIVE ${2} ${3}
	else
		if [ ! -d ${WGCCONFDIR} ]
			then
				mkdir -p ${WGCCONFDIR}
			fi
		if [ -f ${WGCCONFDIR}address ]
			then
				ADDRESS=$(<"${WGCCONFDIR}address")
			else
				ADDRESS=$(echo $WG_IFACE_NTWRK|cut -d'.' -f1)'.'$(echo $WG_IFACE_NTWRK|cut -d'.' -f2)'.'$(echo $WG_IFACE_NTWRK|cut -d'.' -f3)'.'
				WGSFILE=$(<${WGSCONFPATH})
				while echo "${WGSFILE}"|grep -q "${ADDRESS}${WG_ADDRESS_RANGE_BEG}"
					do
						if [ $WG_ADDRESS_RANGE_BEG -eq $WG_ADDRESS_RANGE_END ]
							then
								printf "No available address!\n"
								exit 1
							else
								((WG_ADDRESS_RANGE_BEG=WG_ADDRESS_RANGE_BEG+1))
							fi
				done
				ADDRESS="${ADDRESS}${WG_ADDRESS_RANGE_BEG}"
				printf "${ADDRESS}" > ${WGCCONFDIR}address
				if [ -f ${WGCCONF} ]
					then
						rm -f ${WGCCONF}publickey
					fi
			fi
		if [ ! -f ${WGCCONFDIR}privatekey ] || [ "${2}" = "new" ]
			then
				PRIVKEY=$(wg genkey)
		    		printf "${PRIVKEY}" > ${WGCCONFDIR}privatekey
				if [ -f ${WGCCONFDIR}publickey ]
					then
						rm -f ${WGCCONFDIR}publickey
					fi
				if [ -f ${WGCCONF} ]
					then
						rm -f ${WGCCONF}publickey
					fi
			else
				PRIVKEY=$(<"${WGCCONFDIR}privatekey")
			fi
		if [ ! -f ${WGCCONFDIR}publickey ] || [ "${2}" = "new" ]
			then
				PUBLKEY=$(printf "${PRIVKEY}" | wg pubkey)
				printf "${PUBLKEY}" > ${WGCCONFDIR}publickey
				if [ -f ${WGCCONF} ]
					then
						rm -f ${WGCCONF}publickey
					fi
			else
				PUBLKEY=$(<"${WGCCONFDIR}publickey")
			fi
		if [ ! -f ${WGCCONF} ] || [ "${2}" = "new" ]
			then
				WGCFILE="[Interface]\n\
PrivateKey = $PRIVKEY\n\
PublicKey = $PUBLKEY\n\
Address = $ADDRESS/$(echo $WG_IFACE_NTWRK|cut -d'/' -f2)\n\
\n\
[Peer]\n\
PublicKey = $SPUBLKEY\n\
AllowedIPs = $WG_IFACE_NTWRK\n\
Endpoint = $WG_ENDPOINT:$WG_ENDPOINT_PORT"
				printf "${WGCFILE}" > ${WGCCONF}
			else
				WGCFILE=$(<"${WGCCONF}")
			fi
		if grep -q "$ADDRESS" ${WGSCONFPATH} && [ "${2}" = "new" ]
			then
				rm -f ${WGSCONFPATH}
				WGSCONFPATHCREATE
		elif ! grep -q "$ADDRESS" ${WGSCONFPATH}
			then
				printf "\n\
\n\
[Peer]\n\
PublicKey = $PUBLKEY\n\
AllowedIPs = $ADDRESS/32" >> ${WGSCONFPATH}
			fi
		WGSLIVE ${2} ${3}
		printf "${WGCFILE}\n"
	fi
exit
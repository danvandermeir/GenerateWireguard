#!/bin/bash
#if wireguard is non-standard this is the directory it will check for configuration files
WGDIR=''

#what VPN peers/"clients" connect to
#if blank attempts to determine WAN IP and changes all client config files if WAN IP has changed
WG_ENDPOINT=''

#if blank uses default port of 51820
WG_ENDPOINT_PORT=''

#name of the local Wireguard interface this script controls
#if blank lowest numbered default name selected (wg0 - wg100)
WG_IFACE_NAME=''

#handles only single subnet in form X.X.X.X/X
#if blank checks for default LAN and uses next ascending available third octet with lowest available fourth octet
WG_IFACE_NTWRK=''

#attempt to connect VPN network to default LAN if true
WG_IFACE_NTWRK_ISOLATE=false


##########DO NOT EDIT BELOW SCRIPT UNLESS YOU KNOW WHAT YOU'RE DOING, KTHNX##########
WRITEWGSCONF=false
WGSCRIPTNAME="${0##*/}"
WGSCRIPTPATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )/${WGSCRIPTNAME}"

#HELP REQUEST/HOW TO USE
if [ -z $1 ] || [[ $1 =~ '-h'|'-help'|'--help'|'help' ]]
	then
		printf "Edit variables in begining of script before running!\n\
\n\
Usage:\n\
$WGSCRIPTPATH <REQUIRED> <OPTION> <LIVE>\n\
\n\
REQUIRED:\n\
\t\t- A hostname or username controlled by this script for this Wireguard interface name.\n\
\t\t  Creates a peer if 'new' OPTION specified. Provides details (config file) for hostname or username.\n\
\n\
\t\t-  If Wireguard interface name provided script will stand up or restart the interface using existing configuration.\n\
\n\
OPTION:\n\
\tnew\t- Generate a new private and public key for specified hostname or username and display.\n\
\n\
\tremove\t- Remove peer with specified hostname or username.\n\
\n\
LIVE:\n\
\tlive\t- If provided will update the Wireguard interface with new or removed peer information.\n\
\t\t  Configuration files are otherwise generated for next interface start.\n"
		exit
	fi

#VERIFY EXISTANCE OF REQUIRED BINARIES/APPLICATIONS
if ! command -v wg &>/dev/null
	then
		printf "Wireguard not available! No path or wrong path? Installed?\n" 1>&2
		exit 1
	fi

#MAKE SURE WE KNOW WHERE WIREGUARD IS
#SANITIZE INPUT
if [ -z $WGDIR ] || [ ! -d "$WGDIR" ]
	then
		if [ -d "/etc/wireguard" ]
			then
				WGDIR='/etc/wireguard/'
			else
				printf "WGDIR variable incorrect! Modify $WGSCRIPTPATH script!\n" 1>&2
				exit 1
			fi
	else
		WGDIR="/$WGDIR/"
		WGDIR="${WGDIR//\/\//\/}"
	fi

#DETERMINE WIREGAURD INTERFACE NAME FROM SCRIPT NAME (wireguard_X), SCRIPT PATH, OR CREATES NEW DEFAULT WIREGAURD INTERFACE (wgX) WITH CONFIGURATION FILES
#VERIFY SCRIPT NAME
WGSCRIPTWRITE () {
	WGSCRIPTPATH_NEW="$1$3/generatewg_$3"
	if [ ! -f "$WGSCRIPTPATH_NEW" ]
		then
			if [ ! -d "$1/$3" ]
				then
					mkdir -p "$1/$3"
				fi
			cp "$2" "$WGSCRIPTPATH_NEW"
			chmod 744 "$WGSCRIPTPATH_NEW"
			printf "Script copied to $WGSCRIPTPATH_NEW!\n"
		fi
	printf "Use $WGSCRIPTPATH_NEW instead! Script can be moved.\n"
}
if [ -z $WG_IFACE_NAME ]
	then
		if [ ! "$WGSCRIPTNAME" = "wireguard_" ] && [[ "$WGSCRIPTPATH" == "wireguard_"* ]]
			then
				WG_IFACE_NAME="$(rev <<< $WGSCRIPTPATH|cut -d'_' -f1|rev)"
		elif [[ "$WGSCRIPTPATH" == "$WGDIR"* ]] && [ ! "$WGSCRIPTPATH" = "$WGDIR$WGSCRIPTNAME" ]
			then
				WG_IFACE_NAME="${WGSCRIPTPATH//$WGDIR/}"
				WG_IFACE_NAME="$(cut -d'/' -f1 <<< $WG_IFACE_NAME)"
				WGSCRIPTWRITE "$WGDIR" "$WGSCRIPTPATH" "$WG_IFACE_NAME"
			else
				for x in {0..100}
					do
						if [ ! -d /sys/class/net/wg${x} ] && [ ! -f ${WGDIR}wg${x}/generatewg_wg${x} ]
							then
								WG_IFACE_NAME="wg$x"
								printf "Script WG_IFACE_NAME variable not set!\n\
Script name and path have no hints!\n\
WG_IFACE_NAME set to ${WG_IFACE_NAME}!\n"
								WGSCRIPTWRITE "$WGDIR" "$WGSCRIPTPATH" "$WG_IFACE_NAME"
								WRITEWGSCONF=true
								break
							fi
					done
			fi
	elif [ ! "$WGSCRIPTNAME" = "wireguard_$WG_IFACE_NAME" ]
		then
			printf "Script name is improper!\n" 1>&2
			WGSCRIPTWRITE "$WGDIR" "$WGSCRIPTPATH" "$WG_IFACE_NAME"
		fi
	fi

#SET VARIABLES AND LOAD WIREGAURD INTERFACE CONFIGURATION FILE TO MEMORY OR CREATE IT
WGSDIR="$WGDIR$WG_IFACE_NAME/"
WGSCONFPATH="$WGDIR$WG_IFACE_NAME.conf"
if [ -f ${WGSCONFPATH} ]
	then
		WGSCONF=$(<"${WGSCONFPATH}")
	else
		WRITEWGSCONF=true
	fi

#DETERMINE WIREGAURD INTERFACE IP AND NETWORK FROM SENTINAL FILES, CONFIGURATION FILE, OR CREATE NEW FROM DEFAULT LAN AS TEMPLATE
#VERIFY SENTINAL AND CONFIGURATION FILE CONTINUITY AGAINST SCRIPT SETTING, IF CHANGED MODIFIES ALL "CLIENT"/PEER CONFIGURATION FILES TO MATCH
if [ -z $WG_IFACE_NTWRK ]
	then
		if [ -f ${WGSDIR}address ]
			then
				WG_IFACE_NTWRK=$(<${WGSDIR}address)
		else
			if [ -z $WGSCONF ]
				then
					printf "Script WG_IFACE_NTWRK variable not set!\n"
					WG_IFACE_NTWRK=$(ip route list default|rev|cut -d' ' -f1|rev)
					WG_IFACE_NTWRK=$(ip route list|grep "$WG_IFACE_NTWRK"|grep -v default|cut -d' ' -f1)
					WG_ADDRESS_RANGE_BEG=$(cut -d'/' -f2 <<< $WG_IFACE_NTWRK)
					WG_ADDRESS_RANGE_END=0
					while [ $WG_ADDRESS_RANGE_BEG -gt 7 ]
						do
							WG_ADDRESS_RANGE_BEG=$(( WG_ADDRESS_RANGE_BEG - 8 ))
							WG_ADDRESS_RANGE_END=$(( WG_ADDRESS_RANGE_END + 1 ))
						done
					if [ $WG_ADDRESS_RANGE_END -eq 4 ]
						then
							printf "Can not determine good network from default LAN!\n" 1>&2
							exit 1
						fi
					WG_ADDRESS_RANGE_END=$(cut -d'.' -f${WG_ADDRESS_RANGE_END} <<< $WG_IFACE_NTWRK)
					WG_IFACE_NTWRK="${WG_IFACE_NTWRK//.$WG_ADDRESS_RANGE_END./..}"
					####CURRENT
					while ip route list "${WG_IFACE_NTWRK//../.$WG_ADDRESS_RANGE_END.}"|grep -q '/'
						do
							if [ $WG_ADDRESS_RANGE_END -eq 254]
								then
									G_ADDRESS_RANGE_END=0
								fi
							WG_ADDRESS_RANGE_END=$(( WG_ADDRESS_RANGE_END + 1 ))
								fi
						done
							WG_ADDRESS_RANGE_END=
					printf "Script variable WG_IFACE_NTWRK not set!\n" 1>&2
					WRITEWGSCONF=true
				else
					WG_IFACE_NTWRK=$(grep 'Address = ' <<< "${WGSCONF}"|rev|cut -d' ' -f1|rev)
				fi
			printf "${WG_IFACE_NTWRK}">"${WGSDIR}address"
		fi
	else
		if [ -f ${WGSDIR}address ] && [ ! "$(<${WGSDIR}address)" = "${WG_IFACE_NTWRK}" ]
			then
				WG_IFACE_NTWRK=$(<"${WGSDIR}address")

			fi
	fi
if
	if [[ "${WG_IFACE_NTWRK}" == *"/"* ]]
		then
			WG_ADDRESS_RANGE_BEG=
		fi
if [ -z $WG_ADDRESS_RANGE_BEG ]
	then
		if [ -f ${WGSDIR}address ]
			then
				WG_IFACE_NTWRK=$(<"${WGSDIR}address")
		elif [ ! -z $WGSCONF ]
			then
				WG_IFACE_NTWRK=$(grep 'Address = ' <<< "${WGSCONF}"|rev|cut -d' ' -f1|rev)
			else
				WG_IFACE_NTWRK=$(ip route list default|rev|cut -d' ' -f1|rev)
				WG_IFACE_NTWRK=$(ip route list|grep "${WG_IFACE_NTWRK}"|grep -v default|cut -d' ' -f1)
				printf "Script variable WG_IFACE_NTWRK not set!\n" 1>&2
			fi
		printf "Script variable WG_ADDRESS_RANGE_BEG not set!\n" 1>&2
		exit 1
	fi
if [ -z $WG_ADDRESS_RANGE_END ]
	then
		printf "Script variable WG_ADDRESS_RANGE_END not set!\n" 1>&2
		exit 1
	fi
if [ -z $WG_ENDPOINT_PORT ]
	then
		WG_ENDPOINT_PORT="51820"
	fi
if [ -f ${WGSCONFPATH}privatekey ]
	then
		SPRIVKEY=$(<"${WGSDIR}privatekey")
	else
		SPRIVKEY=$(wg genkey)
		printf "${SPRIVKEY}" > ${WGSDIR}privatekey
	fi
if [ -f ${WGSCONFPATH}publickey ]
	then
		SPUBLKEY=$(<"${WGSDIR}publickey")
	else
		SPUBLKEY=$(printf "${SPRIVKEY}" | wg pubkey)
		printf "${SPUBLKEY}" > ${WGSDIR}publickey
	fi
if [ -z $WG_ENDPOINT ]
	then
		WG_ENDPOINT="$(dig +short myip.opendns.com @resolver1.opendns.com)"
		printf "Script WG_ENDPOINT variable not set!\n\
ENPOINT_HOSTNAME_OR_WANIP set to ${WG_ENDPOINT} on port ${WG_ENDPOINT_PORT}!\n\
All hostname or username config files belonging to Wireguard interface name ${WG_IFACE_NAME} reset!\n"
		if [ -z $WGSCRIPTPATH_NEW ]
			then
				WGSCRIPTPATH_NEW="${WGSCRIPTPATH}"
			fi
		if [ -d ${WGSDIR} ]
			then
				for x in $(find ${WGSDIR} -maxdepth 1 -mindepth 1 -type d)
					do
						WGC=$(printf "${x}"|rev|cut -d'/' -f 1|rev)
						WGCCONF=${x}'/'${WGC}'.conf'
						if [ -f ${WGCCONF} ]
							then
								rm -f ${WGCCONF}
							fi
						if [ -f ${x}/privatekey ] && [ -f ${x}/publickey ] && [ -f ${x}/address ]
							then
								ADDRESS=$(<"${x}/address")
								PUBLKEY=$(<"${x}/publickey")
								PRIVKEY=$(<"${x}/privatekey")
								printf "\t${WGC} - ${ADDRESS} - ${PUBLKEY}\n"
								WGCFILE="[Interface]\n\
PrivateKey = ${PRIVKEY}\n\
PublicKey = ${PUBLKEY}\n\
Address = ${ADDRESS}/$(echo $WG_IFACE_NTWRK|cut -d'/' -f2)\n\
\n\
[Peer]\n\
PublicKey = ${SPUBLKEY}\n\
AllowedIPs = $WG_IFACE_NTWRK\n\
Endpoint = $WG_ENDPOINT:$WG_ENDPOINT_PORT"
								printf "${WGCFILE}" > ${WGCCONF}
							fi
					done
			fi
	fi
WGC="${1}"
WGCCONFDIR="$WGSDIR$1/"
WGCCONF="${WGCCONFDIR}${WGC}.conf"
WGSCONFPATHCREATE () {
	WGSFILE="[Interface]\n\
PrivateKey = ${SPRIVKEY}\n\
PublicKey = ${SPUBLKEY}\n\
ListenPort = ${WG_ENDPOINT_PORT}"
	if [ -d ${WGSDIR} ]
		then
			for x in $(find ${WGSDIR} -maxdepth 1 -mindepth 1 -type d)
				do
					if [ -f ${x}/publickey ] && [ -f ${x}/address ]
						then
							WGSFILE="$WGSFILE\n\
\n\
[Peer]\n\
PublicKey = $(<${x}/publickey)\n\
AllowedIPs = $(<${x}/address)/32"
						fi
				done
		else
			mkdir -p ${WGSDIR}
		fi
	if [ ! -z $WGSCRIPTPATH_NEW ]
		then
			if [ ! -f ${WGSCRIPTPATH_NEW} ]
				then
					printf "Script moved to: ${WGSCRIPTPATH_NEW}\n"
					cp ${WGSCRIPTPATH} ${WGSCRIPTPATH_NEW}
				fi
			sed -i -e "0,/.*WG_ENDPOINT=.*/ s/.*WG_ENDPOINT=.*/WG_ENDPOINT='${WG_ENDPOINT}'/" ${WGSCRIPTPATH_NEW}
			sed -i -e "0,/.*WG_IFACE_NAME=.*/ s/.*WG_IFACE_NAME=.*/WG_IFACE_NAME='${WG_IFACE_NAME}'/" ${WGSCRIPTPATH_NEW}
		fi
	printf "${WGSFILE}" > ${WGSCONFPATH}
}
WGSLIVE () {
	if [ "${2}" = "live" ] || ([ "${1}" = "live" ] && [ -z $3 ])
		then
			if [ -d /sys/class/net/${WG_IFACE_NAME} ]
				then
					wg syncconf ${WG_IFACE_NAME} ${WGSCONFPATH}
				else
					if [ -z $WGSCRIPTPATH_NEW ]
						then
							printf "Interface ${WG_IFACE_NAME} not running!\n\
Start interface with:\n\
${WGSCRIPTPATH} ${WG_IFACE_NAME}\n"
						else
							printf "Interface ${WG_IFACE_NAME} not running!\n\
Start interface with:\n\
${WGSCRIPTPATH_NEW} ${WG_IFACE_NAME}\n"
						fi
				fi
		fi
}
if [ ! -f ${WGSCONFPATH} ] || [ ! -z $WGSCRIPTPATH_NEW ]
	then
		WGSCONFPATHCREATE
	fi
if [ "${WGC}" = "${WG_IFACE_NAME}" ]
	then
		if [ -d /sys/class/net/${WG_IFACE_NAME} ]
			then
				ip link delete dev ${WG_IFACE_NAME}
			fi
		ip link add dev ${WG_IFACE_NAME} type wireguard && wg setconf ${WG_IFACE_NAME} ${WGSCONFPATH} && exit
		exit 1
	fi
if [ "${2}" = "remove" ]
	then
		if [ -d ${WGCCONFDIR} ]
			then
				printf "${WGC} removed!\n"
				rm -rf ${WGCCONFDIR}
			else
				printf "No Hostname or Username called ${WGC} exists!\n"
			fi
		rm -f ${WGSCONFPATH}
		WGSCONFPATHCREATE
		WGSLIVE ${2} ${3}
	else
		if [ ! -d ${WGCCONFDIR} ]
			then
				mkdir -p ${WGCCONFDIR}
			fi
		if [ -f ${WGCCONFDIR}address ]
			then
				ADDRESS=$(<"${WGCCONFDIR}address")
			else
				ADDRESS=$(echo $WG_IFACE_NTWRK|cut -d'.' -f1)'.'$(echo $WG_IFACE_NTWRK|cut -d'.' -f2)'.'$(echo $WG_IFACE_NTWRK|cut -d'.' -f3)'.'
				WGSFILE=$(<${WGSCONFPATH})
				while echo "${WGSFILE}"|grep -q "${ADDRESS}${WG_ADDRESS_RANGE_BEG}"
					do
						if [ $WG_ADDRESS_RANGE_BEG -eq $WG_ADDRESS_RANGE_END ]
							then
								printf "No available address!\n"
								exit 1
							else
								((WG_ADDRESS_RANGE_BEG=WG_ADDRESS_RANGE_BEG+1))
							fi
				done
				ADDRESS="${ADDRESS}${WG_ADDRESS_RANGE_BEG}"
				printf "${ADDRESS}" > ${WGCCONFDIR}address
				if [ -f ${WGCCONF} ]
					then
						rm -f ${WGCCONF}publickey
					fi
			fi
		if [ ! -f ${WGCCONFDIR}privatekey ] || [ "${2}" = "new" ]
			then
				PRIVKEY=$(wg genkey)
		    		printf "${PRIVKEY}" > ${WGCCONFDIR}privatekey
				if [ -f ${WGCCONFDIR}publickey ]
					then
						rm -f ${WGCCONFDIR}publickey
					fi
				if [ -f ${WGCCONF} ]
					then
						rm -f ${WGCCONF}publickey
					fi
			else
				PRIVKEY=$(<"${WGCCONFDIR}privatekey")
			fi
		if [ ! -f ${WGCCONFDIR}publickey ] || [ "${2}" = "new" ]
			then
				PUBLKEY=$(printf "${PRIVKEY}" | wg pubkey)
				printf "${PUBLKEY}" > ${WGCCONFDIR}publickey
				if [ -f ${WGCCONF} ]
					then
						rm -f ${WGCCONF}publickey
					fi
			else
				PUBLKEY=$(<"${WGCCONFDIR}publickey")
			fi
		if [ ! -f ${WGCCONF} ] || [ "${2}" = "new" ]
			then
				WGCFILE="[Interface]\n\
PrivateKey = $PRIVKEY\n\
PublicKey = $PUBLKEY\n\
Address = $ADDRESS/$(echo $WG_IFACE_NTWRK|cut -d'/' -f2)\n\
\n\
[Peer]\n\
PublicKey = $SPUBLKEY\n\
AllowedIPs = $WG_IFACE_NTWRK\n\
Endpoint = $WG_ENDPOINT:$WG_ENDPOINT_PORT"
				printf "${WGCFILE}" > ${WGCCONF}
			else
				WGCFILE=$(<"${WGCCONF}")
			fi
		if grep -q "$ADDRESS" ${WGSCONFPATH} && [ "${2}" = "new" ]
			then
				rm -f ${WGSCONFPATH}
				WGSCONFPATHCREATE
		elif ! grep -q "$ADDRESS" ${WGSCONFPATH}
			then
				printf "\n\
\n\
[Peer]\n\
PublicKey = $PUBLKEY\n\
AllowedIPs = $ADDRESS/32" >> ${WGSCONFPATH}
			fi
		WGSLIVE ${2} ${3}
		printf "${WGCFILE}\n"
	fi
exit
